<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ls.stockforecast.dao.base.stockforecast.StockForecastMapper">
  <resultMap id="BaseResultMap" type="com.ls.stockforecast.entity.model.base.stockforecast.StockForecast">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="scode" jdbcType="VARCHAR" property="scode" />
    <result column="mktcode" jdbcType="INTEGER" property="mktcode" />
    <result column="date" jdbcType="INTEGER" property="date" />
    <result column="rank" jdbcType="INTEGER" property="rank" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, scode, mktcode, date, rank, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sf_stock_forecast
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from sf_stock_forecast
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.ls.stockforecast.entity.model.base.stockforecast.StockForecast">
    insert into sf_stock_forecast (id, scode, mktcode,
      date, rank, create_time, 
      update_time)
    values (#{id,jdbcType=INTEGER}, #{scode,jdbcType=VARCHAR}, #{mktcode,jdbcType=INTEGER},
      #{date,jdbcType=INTEGER}, #{rank,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.ls.stockforecast.entity.model.base.stockforecast.StockForecast">
    insert into sf_stock_forecast
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="scode != null">
        scode,
      </if>
      <if test="mktcode != null">
        mktcode,
      </if>
      <if test="date != null">
        date,
      </if>
      <if test="rank != null">
        rank,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="scode != null">
        #{scode,jdbcType=VARCHAR},
      </if>
      <if test="mktcode != null">
        #{mktcode,jdbcType=INTEGER},
      </if>
      <if test="date != null">
        #{date,jdbcType=INTEGER},
      </if>
      <if test="rank != null">
        #{rank,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ls.stockforecast.entity.model.base.stockforecast.StockForecast">
    update sf_stock_forecast
    <set>
      <if test="scode != null">
        scode = #{scode,jdbcType=VARCHAR},
      </if>
      <if test="mktcode != null">
        mktcode = #{mktcode,jdbcType=INTEGER},
      </if>
      <if test="date != null">
        date = #{date,jdbcType=INTEGER},
      </if>
      <if test="rank != null">
        rank = #{rank,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ls.stockforecast.entity.model.base.stockforecast.StockForecast">
    update sf_stock_forecast
    set scode = #{scode,jdbcType=VARCHAR},
      mktcode = #{mktcode,jdbcType=INTEGER},
      date = #{date,jdbcType=INTEGER},
      rank = #{rank,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>